1
00:00:00,365 --> 00:00:01,468
Flow Control.

2
00:00:02,948 --> 00:00:04,040
Операторы if-else.

3
00:00:06,726 --> 00:00:10,027
Выбор приходится в приложениях осуществлять постоянно

4
00:00:10,130 --> 00:00:13,055
в зависимости от каких-либо исходных данных,

5
00:00:14,677 --> 00:00:20,431
чтобы выполнить какую-либо дальнейшую ветвь в методе.

6
00:00:20,867 --> 00:00:23,500
В общем-то в методе, больше нигде, или в блоке кода.

7
00:00:27,184 --> 00:00:30,017
Для решения этой проблемы используется оператор if-else.

8
00:00:30,803 --> 00:00:34,821
Простой, удобный и в общем-то достаточно очевидный.

9
00:00:36,118 --> 00:00:39,054
Использовать его следует грамотно.

10
00:00:39,459 --> 00:00:41,617
Давайте посмотрим.

11
00:00:42,212 --> 00:00:48,138
Пусть создан метод, который вычисляет периметр прямоугольника.

12
00:00:49,456 --> 00:00:57,993
Передаются два параметра, и на их основе вычисляется значение результата.

13
00:01:00,745 --> 00:01:02,685
Возникают на самом деле

14
00:01:04,467 --> 00:01:10,123
Могут возникнуть на самом деле проблемы, если данные приходят некорректные.

15
00:01:11,520 --> 00:01:13,455
Например отрицательные.

16
00:01:14,932 --> 00:01:17,521
Т.е. одно из значений отрицательных или оба,

17
00:01:18,401 --> 00:01:23,807
то, естественно, вычислять периметр невозможно, потому что такой прямоугольник не существует.

18
00:01:25,066 --> 00:01:28,153
Либо, наоборот, данные слишком большие

19
00:01:28,209 --> 00:01:32,401
и выходят за какие-то пределы, ограниченные либо приложением,

20
00:01:33,758 --> 00:01:36,421
либо возможностями самого типа double.

21
00:01:38,921 --> 00:01:40,021
Это другая крайность.

22
00:01:40,045 --> 00:01:43,827
Рассмотрим просто и учтём первую крайность, вторую не будем.

23
00:01:45,135 --> 00:01:49,566
Т.е. отрицательное значение с помощью оператора If.

24
00:01:49,777 --> 00:01:53,610
Т.е. вычислять значение можно только в случае если выражение истинно,

25
00:01:53,967 --> 00:02:12,036
т.е. lengthA > 0 и lengthB > 0

26
00:02:21,053 --> 00:02:23,300
Что же делать в противном случае,

27
00:02:25,612 --> 00:02:31,821
если в if отрицательное значение?

28
00:02:33,051 --> 00:02:35,321
это большой вопрос

29
00:02:36,495 --> 00:02:40,674
и имеет отношение к проектированию методов, проектированию алгоритмов.

30
00:02:41,215 --> 00:02:46,064
Самый простой вариант, если у нас имеется некое значение по умолчанию, которые можно подставить,

31
00:02:46,431 --> 00:02:48,304
то его, конечно, следует использовать.

32
00:02:48,835 --> 00:02:54,648
Но в подавляющем числе случаев, значение по умолчанию у нас просто не существует.

33
00:02:55,553 --> 00:03:00,551
Поэтому приходится выбирать какое-то решение.

34
00:03:00,576 --> 00:03:05,547
В данном случае, можно прибегнуть к решению, которое является классическим

35
00:03:05,572 --> 00:03:12,582
и поставить какое-либо значение недопустимое, например, -1

36
00:03:12,607 --> 00:03:15,365
и которое будет описано в документации по методу,

37
00:03:15,853 --> 00:03:21,099
и тот, кто будет использовать метод будет знать, что если полученный результат - 1,

38
00:03:21,456 --> 00:03:27,588
то, соответственно, периметр прямоугольника не вычислен.

39
00:03:27,985 --> 00:03:30,548
Другой вариант может быть генерация исключения,

40
00:03:34,651 --> 00:03:37,955
что в общем-то тоже является правомерным в зависимости от ситуации,

41
00:03:37,979 --> 00:03:41,275
в зависимости от критичности этих вычислений для нас.

42
00:03:44,769 --> 00:03:50,348
В данном же случае нас пока интересует только метод if, оператор if.

43
00:03:50,960 --> 00:03:52,972
И смотрите, в чём суть еще.

44
00:03:53,412 --> 00:04:02,000
Суть в том, что в if всегда должен быть под истинным значением — это основной положительный сценарий.

45
00:04:02,740 --> 00:04:04,930
То есть наиболее ожидаемые значения.

46
00:04:04,955 --> 00:04:07,699
Когда мы передаём сюда параметры, мы ожидаем,

47
00:04:07,724 --> 00:04:13,258
что площадь, периметр, площадь — неважно какое вычисление,

48
00:04:13,283 --> 00:04:15,568
будут вычислены, вычислены корректно.

49
00:04:16,378 --> 00:04:19,091
Т.е. мы ожидаем правильных значений.

50
00:04:19,821 --> 00:04:21,662
Вычислили — вот результат.

51
00:04:21,687 --> 00:04:26,954
Под else всегда вариация сценария, то есть отрицательный сценарий.

52
00:04:26,979 --> 00:04:29,316
Написать каким-либо образом наоборот,

53
00:04:30,022 --> 00:04:33,770
но перевернуть выражение, кстати, вот такое достаточно легко.

54
00:04:34,794 --> 00:04:36,309
Это уже будет нехорошо.

55
00:04:36,334 --> 00:04:38,745
Перевернуть выражение? Давайте перевернем.

56
00:04:39,522 --> 00:04:44,830
Т.е., соответственно, только нужно будет заменить, т.е. меняются все знаки на противоположные,

57
00:04:45,743 --> 00:04:53,240
причём вот такие: <=, и тут <=, и полностью противоположный результат.

58
00:04:55,121 --> 00:04:58,756
И получается, что здесь мы получили нехорошее значение,

59
00:05:00,605 --> 00:05:02,358
но оно истинно для этого случая.

60
00:05:02,573 --> 00:05:08,236
А для нас это некорректное значение, получается, в общем-то, противоречие.

61
00:05:08,400 --> 00:05:11,788
Т.е. есть истина, а для нас это ложь, для нас плохо.

62
00:05:12,019 --> 00:05:14,169
А наоборот когда плохо, то это хорошо.

63
00:05:16,590 --> 00:05:24,288
Таких ситуаций вообще следует избегать и следить за ними тоже достаточно серьезно.

64
00:05:27,677 --> 00:05:29,184
Вернемся к обычному.

65
00:05:35,247 --> 00:05:37,873
if, кстати, может быть и однострочным.

66
00:05:40,191 --> 00:05:46,068
В этом случае, кстати, он может быть и отрицательным,

67
00:05:46,215 --> 00:05:48,821
т.е. решение может быть и отрицательным,

68
00:05:49,754 --> 00:05:52,984
т.е. проверяется какое-либо входящее значение.

69
00:05:54,492 --> 00:06:04,659
Ну допустим, у нас какой-то добавляется, передается какой-нибудь String name

70
00:06:06,807 --> 00:06:11,323
и если это имя, которое может дадим периметру,

71
00:06:12,667 --> 00:06:24,055
и если это значение, например, является null'ом,

72
00:06:27,055 --> 00:06:30,955
т.е. пустым, а для нас это является недопустимым,

73
00:06:31,356 --> 00:06:41,600
то тогда в этом коде можно сгенерировать какой-либо exception.

74
00:06:41,784 --> 00:06:45,400
Так как ещё собственных exception'ов не рассматривалось,

75
00:06:45,400 --> 00:06:52,023
то есть у нас стандартный exception, который позволяет нам выполнить.

76
00:06:52,048 --> 00:06:59,637
И, соответственно, сюда можно добавить какое-либо сообщение о некорректности данных и его значение.

77
00:07:02,128 --> 00:07:06,326
В кавычках получается этот некоторый текст будет.

78
00:07:06,810 --> 00:07:08,928
Т.е. однострочный if в данном случае

79
00:07:11,467 --> 00:07:18,404
позволяет нам избегать взятия большого куска кода под if и написание else.

80
00:07:18,809 --> 00:07:26,410
Т.е. если бы нужно было бы написать обратное действие, т.е. как было сказано здесь положительный сценарий:

81
00:07:26,672 --> 00:07:32,451
т.е. если у нас всё хорошо, а всё хорошо — это значит что name не равен null'у,

82
00:07:33,182 --> 00:07:41,328
то пришлось бы весь вот этот код вставлять внутрь,

83
00:07:43,040 --> 00:07:50,633
а throw генерацию exception'а помещать в else.

84
00:08:01,545 --> 00:08:07,278
Ошибка, потому что result не виден, нужно вынести перед if.

85
00:08:07,905 --> 00:08:12,636
Что будет сейчас и сделано, чтобы не было ошибок компиляции.

86
00:08:12,661 --> 00:08:16,255
Видите, код стал значительно менее читабельным,

87
00:08:16,478 --> 00:08:20,959
т.е. здесь понятие читабельности как раз диктует того,

88
00:08:20,984 --> 00:08:25,468
что сделать однострочный if, и принятие решения будет сразу.

89
00:08:25,936 --> 00:08:30,507
А ещё читабельность заключается в том, что

90
00:08:32,176 --> 00:08:34,072
програмист, который смотрит ваш код,

91
00:08:34,144 --> 00:08:38,718
и у него, например, был сгенерирован этот exception, хочет знать почему.

92
00:08:39,186 --> 00:08:45,651
И ему придётся искать где-то в конце метода, смотреть на этот самый if-else

93
00:08:46,382 --> 00:08:51,776
и понимать, какое значение здесь было выброшено.

94
00:08:51,801 --> 00:08:56,021
Потому что на самом деле-то, в реале, вот этот кусок, который внутри else,

95
00:08:56,045 --> 00:09:01,200
может быть значительно-значительно более длинным.

